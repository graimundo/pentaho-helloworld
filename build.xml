<project name="PentahoHelloWorld" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" > 
	<description> 
		This build file is used to create the PentahoHelloWorld project and works with the subfloor.xml file. 
	</description> 

	<!-- other subfloors are imported by this one -->
	<import file="build-res/subfloor-js.xml"/>
	

	<!-- START: override subfloor.clean-all -->
	<target name="clean-all" depends="subfloor.clean-all">

		<!-- devlib.dir is not being deleted -->
		<delete dir="${devlib.dir}"/>
	</target>
	<!-- END: override subfloor.clean-all -->


	<!-- START: override subfloor-js.clean-js -->
	<target name="clean-js" depends="subfloor-js.clean-js">

		<!-- pentaho-js-build is not being deleted -->
		<delete dir="build-res/pentaho-js-build"/>
		<delete file="build-res/pentaho-js-build.zip"/>

		<!-- requireCfg.js and requireCfg-raw.js are not being deleted -->
		<delete file="build-res/requireCfg.js"/>
		<delete file="build-res/requireCfg-raw.js"/>
	</target>
	<!-- END: override subfloor-js.clean-js -->


	<!-- START: override subfloor-js.npm-install -->
	<target name="npm-install" depends="npm-install-windows, npm-install-unix">
		<echo message="I'm npm install!" />
	</target>

	<!-- Only run if there is a package.json file -->
	<target name="npm-install-windows" depends="check-pentaho-js-build-downloaded" if="isWindows">
		<echo message="I'm a WINDOWS!" />
		<if>
			<available file="package.json"/>
			<then>
				<exec executable="cmd">
					<arg value="/c"/>
					<arg value="npm"/>
					<arg value="install"/>
				</exec>
			</then>
			<else>
				<echo>No package.json found, using the default</echo>
				<exec executable="cmd">
					<arg value="/c"/>
					<arg value="npm"/>
					<arg value="install"/>
					<arg value="build-res/pentaho-js-build"/>
				</exec>
			</else>
		</if>
	</target>

	<!-- Only run if there is a package.json file -->
	<target name="npm-install-unix" depends="check-pentaho-js-build-downloaded" unless="isWindows">
		<echo message="I'm a UNIX!" />
		<if>
			<available file="package.json"/>
			<then>
				<exec executable="npm">
					<arg value="install"/>
				</exec>
			</then>
			<else>
				<echo>No package.json found, using the default</echo>
				<exec executable="npm">
					<arg value="install"/>
					<arg value="build-res/pentaho-js-build"/>
				</exec>
			</else>
		</if>
	</target>
	<!-- END: override subfloor-js.npm-install -->


	<!-- START: override subfloor-js.test-js -->
	<target name="test-js" depends="test-js-windows, test-js-unix">
		<echo message="I'm Test-JS!" />
	</target>

	<target name="test-js-windows" depends="install-antcontrib, npm-install" if="isWindows">
		<echo message="I'm a WINDOWS!" />

		<if>
			<available file="${js.karma.ci.config}"/>
			<then>
				<!-- we have karma available, use it to run the tests -->
				<exec executable="cmd">
					<arg value="/c"/>
					<arg value="node"/>
					<arg value="${js.karma.dir.bin}"/>
					<arg value="start"/>
					<arg value="${js.karma.ci.config}"/>
					<!-- if we are running via ant, then assume we must 'single-run' -->
					<arg value="--single-run"/>
				</exec>
			</then>
			<else>
				<fail>There is no karma configuration file available (looking for: ${js.karma.ci.config})</fail>
			</else>
		</if>
	</target>

	<target name="test-js-unix" depends="install-antcontrib, npm-install" unless="isWindows">
		<echo message="I'm a UNIX!" />

		<if>
			<available file="${js.karma.ci.config}"/>
			<then>
				<!-- we have karma available, use it to run the tests -->
				<exec executable="node">
					<arg value="${js.karma.dir.bin}"/>
					<arg value="start"/>
					<arg value="${js.karma.ci.config}"/>
					<!-- if we are running via ant, then assume we must 'single-run' -->
					<arg value="--single-run"/>
				</exec>
			</then>
			<else>
				<fail>There is no karma configuration file available (looking for: ${js.karma.ci.config})</fail>
			</else>
		</if>
	</target>
	<!-- END: override subfloor-js.test-js -->


	<!-- START: override subfloor-js.resolve-js (same as yesterday's subfloor-js) -->
	<target name="resolve-js" depends="install-ivy, install-antcontrib">
		<ivy:resolve file="ivy.xml" conf="js"/>
		<ivy:retrieve conf="js" pattern="${js.lib.dir}/[module]-[revision](-[classifier]).[ext]"/>

		<!-- js-libs where not being expanded -->
		<if>
			<available file="${js.lib.dir}"/>
			<then>
				<unzip dest="${js.expanded.lib.dir}" overwrite="true">
					<fileset file="${js.lib.dir}/*.zip"/>
					<patternset>
						<exclude name="**/*.jar"/>
						<exclude name="**/plugin*.xml"/>
						<exclude name="**/settings.xml"/>
						<exclude name="**/themes.xml"/>
					</patternset>
				</unzip>
			</then>
			<else>
				<echo>No js libraries need expanding. ${js.lib.dir} does not exist.</echo>
			</else>
		</if>
	</target>
	<!-- END: override subfloor-js.resolve-js (same as yesterday's subfloor-js) -->


	<!-- START: override subfloor-pkg.assembke -->
	<target name="assemble" depends="assemble.init,assemble.copy-libs">
		<copy todir="${approot.stage.dir}" overwrite="true">

			<!-- copy from script build output dir instead -->
			<fileset dir="${js.build.output.dir}">

				<!-- exclude any remaining js source files -->
				<exclude name="**/${js.build.output.source.subdir}/**"/>
				
				<!-- exclude build.txt generated by RequireJS -->
				<exclude name="**/build.txt/**" />
			</fileset>

		</copy>
		<chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />

		<!-- create the version file -->
		<tstamp/>
		<property name="sequential.build.id" value="manual-${DSTAMP}"/>
		<echo file="${approot.stage.dir}/version.xml"
			  message="&lt;version branch='${project.stage}'  buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>
			  
		<!-- copy plugin.xml and plugin.spring.xml to stage dir -->
		<copy todir="${approot.stage.dir}" overwrite="true">
			<file name="${package.resdir}/plugin.xml" />
			<file name="${package.resdir}/plugin.spring.xml" />
		</copy>
		
	</target>
	<!-- END: override subfloor-pkg.assembke -->

</project>
